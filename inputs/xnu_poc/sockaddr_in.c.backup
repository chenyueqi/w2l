#include <errno.h>
#include <unistd.h>
#include <netinet/in.h>
#include <sys/socket.h>
#include <sys/kern_control.h>
#include <sys/sys_domain.h>
#include <net/if.h>
#include <netinet/in_var.h>
#include <netinet6/nd6.h>
#include <arpa/inet.h>
#include <sys/ioctl.h>

#include <stdio.h>
#include <stdlib.h>
#include <string.h>


int allocation(){
	int sock;
	struct sockaddr_in saddr;

	sock = socket(PF_INET, SOCK_DGRAM, IPPROTO_UDP);
//	sock = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP);

	if(sock < 0){
		perror("create socket");
	}

	memset(&saddr, 0, sizeof(saddr));
	saddr.sin_len = sizeof(saddr);
	saddr.sin_family = PF_INET;
	saddr.sin_port = htons(7003);
	saddr.sin_addr.s_addr = inet_addr("132.145.210.169");
	int len = sizeof(saddr);
	if(sendto(sock, "TEST", 4, MSG_WAITALL, (struct sockaddr *) &saddr, sizeof(saddr)) < 0){
		perror("sendto");
	}
    len = 0x100;
	char *sockname = malloc(0x100);
    memset(sockname, 0, 0x100);
    if(getsockname(sock, (struct sockaddr *)sockname, &len) < 0){
        perror("getsockname");
        exit(0);
    }	

	return sock;
}


void leak(int sock){
	
}


int main(){
	int sock = allocation();
	leak(sock);
}
